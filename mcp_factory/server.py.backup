"""ManagedServer - Extended FastMCP class with self-management capabilities.

Registers FastMCP's own public methods as server management tools, supporting JWT scope-based permission control.
"""

from __future__ import annotations

import asyncio
import inspect
import logging
import textwrap
import time
from typing import TYPE_CHECKING, Any

from fastmcp import FastMCP
from fastmcp.tools.tool import Tool
from mcp.types import ToolAnnotations

# Import from authorization system
from .authorization import get_current_user_info
from .exceptions import ServerError

if TYPE_CHECKING:
    from collections.abc import Awaitable, Callable

# Set up logging
logger = logging.getLogger(__name__)


class ManagedServer(FastMCP[Any]):
    """Extended FastMCP class with self-management capabilities and authentication support.

    Extends FastMCP by adding:
    - Automatic registration of management tools
    - Scope-based permission control
    - Support for multiple authentication providers

    See __init__ method for authentication options and detailed examples.
    """

    # =============================================================================
    # Class Constants Definition
    # =============================================================================

    # Define annotation templates to avoid repetition
    _ANNOTATION_TEMPLATES = {
        "readonly": {  # Read-only query type
            "readOnlyHint": True,
            "destructiveHint": False,
            "openWorldHint": False,
        },
        "modify": {  # Modify but non-destructive
            "readOnlyHint": False,
            "destructiveHint": False,
            "openWorldHint": False,
        },
        "destructive": {  # Destructive operations
            "readOnlyHint": False,
            "destructiveHint": True,
            "openWorldHint": False,
        },
        "external": {  # Involving external systems
            "readOnlyHint": False,
            "destructiveHint": True,
            "openWorldHint": True,
        },
    }

    # Meta management tools (tools that should not be cleared)
    _META_MANAGEMENT_TOOLS = {
        "manage_get_management_tools_info",
        "manage_clear_management_tools",
        "manage_recreate_management_tools",
        "manage_reset_management_tools",
    }

    # =============================================================================
    # Initialization Methods
    # =============================================================================

    def __init__(
        self,
        *,
        expose_management_tools: bool = True,
        authorization: bool | None = None,
        management_tool_tags: set[str] | None = None,
        **kwargs: Any,
    ) -> None:
        """Initialize ManagedServer.

        Args:
            expose_management_tools: Whether to expose FastMCP methods as management tools (default: True)

            authorization: Authorization configuration (bool | None)
                * None (default): Infer from auth parameter - no auth means no authorization, with auth means enable authorization
                * True: Force enable authorization (uses Casbin RBAC system)
                * False: Force disable authorization (all permissions allowed)
            management_tool_tags: Management tool tag set (fastmcp 2.8.0+)
            **kwargs: All parameters for FastMCP, including:
                - auth: Authentication provider (AuthProvider | None | NotSetT)
                    * NotSet (default): Use FastMCP default behavior (checks environment variables)
                    * None: No authentication required
                    * JWTVerifier: JWT token authentication with key verification
                    * TokenVerifier: Simple bearer token verification
                    * InMemoryOAuthProvider: Built-in OAuth server (testing/development)
                    * OAuthProxy: External OAuth providers (GitHub, Google, etc.)
                    * Custom implementations: Any class implementing AuthProvider interface
                - name: Server name (required)
                - instructions: Server description
                - tools: List of tools to register

        Examples:
            # Default behavior - infer authorization from auth parameter
            server = ManagedServer(name="my-server")  # Auto-infer based on auth

            # Explicit authorization control
            server = ManagedServer(name="secure-server", authorization=True)   # Force enable
            server = ManagedServer(name="open-server", authorization=False)    # Force disable

            # Combined with authentication
            from fastmcp.server.auth.providers.jwt import JWTVerifier, RSAKeyPair

            # JWT authentication with authorization
            key_pair = RSAKeyPair.generate()
            jwt_auth = JWTVerifier(public_key=key_pair.public_key)
            server = ManagedServer(
                name="jwt-server",
                auth=jwt_auth,
                authorization=True  # Explicit enable
            )

            # OAuth authentication with auto-inferred authorization
            from fastmcp.server.auth import OAuthProxy
            proxy_auth = OAuthProxy(providers=["github", "google"])
            server = ManagedServer(
                name="oauth-server",
                auth=proxy_auth  # authorization=None will auto-enable
            )

            # Public server with no auth or authorization
            server = ManagedServer(
                name="public-server",
                auth=None,
                authorization=False
            )
        """
        # 💾 Save configuration parameters
        self.expose_management_tools = expose_management_tools
        self.management_tool_tags = management_tool_tags or {"management", "admin"}

        # 🔒 Setup authorization system
        self.enable_permission_check = self._setup_authorization(
            authorization, kwargs.get("auth"), expose_management_tools
        )

        # Initialize authorization manager if needed
        self._authorization_manager = None
        if self.enable_permission_check:
            try:
                from .authorization.manager import MCPAuthorizationManager

                self._authorization_manager = MCPAuthorizationManager()
                logger.info("Authorization manager initialized successfully")
            except Exception as e:
                logger.warning(f"Failed to initialize authorization manager: {e}")
                self._authorization_manager = None

        # 🏷️ Dynamic attribute declaration (set by Factory)
        self._config: dict[str, Any] = {}
        self._server_id: str = ""
        self._created_at: str = ""

        # ⚠️ Security warning: warn when dangerous configuration
        self._validate_security_config()

        # Log initialization information
        server_name = kwargs.get("name", "ManagedServer")
        logger.info("Initializing ManagedServer: %s", server_name)
        logger.info(
            f"Expose management tools: {expose_management_tools}, Permission check: {self.enable_permission_check}"
        )

        if expose_management_tools:
            # Create management tool object list
            management_tools = self._create_management_tools()
            logger.info("Created %s management tools", len(management_tools))

            # Merge business tools and management tools
            business_tools = kwargs.get("tools", [])
            kwargs["tools"] = business_tools + management_tools

        # Fix fastmcp 2.8.0 compatibility: change description to instructions
        if "description" in kwargs:
            kwargs["instructions"] = kwargs.pop("description")

        super().__init__(**kwargs)

        # Register user permission tools (separate from management tools)
        if self.enable_permission_check:
            self._register_user_permission_tools()

        logger.info("ManagedServer %s initialization completed", server_name)

    def _setup_authorization(self, authorization, auth_provider, expose_management_tools):
        """Setup authorization system based on parameters"""

        # Handle explicit authorization parameter
        if authorization is not None:
            if authorization is True:
                logger.info("Authorization explicitly enabled")
                return True
            elif authorization is False:
                logger.info("Authorization explicitly disabled")
                return False
            else:
                logger.warning(f"Invalid authorization value: {authorization}, using False")
                return False

        # Default behavior: infer from auth parameter
        if auth_provider is None:
            # No auth -> no authorization by default
            inferred = False
            logger.info("No auth provider -> authorization disabled")
        else:
            # Has auth -> enable authorization if exposing management tools
            inferred = expose_management_tools
            logger.info(f"Auth provider detected -> authorization {'enabled' if inferred else 'disabled'}")

        return inferred

    def _validate_security_config(self) -> None:
        """Validate security configuration."""
        if self.expose_management_tools and not self.enable_permission_check:
            import os
            import warnings

            # Detect if in production environment
            is_production = any(
                [
                    os.getenv("ENV") == "production",
                    os.getenv("ENVIRONMENT") == "production",
                    os.getenv("NODE_ENV") == "production",
                    os.getenv("FASTMCP_ENV") == "production",
                ]
            )

            if is_production:
                msg = (
                    "🚨 Production security error: Exposing management tools "
                    "with disabled permission check not allowed. "
                    "Set enable_permission_check=True or expose_management_tools=False"
                )
                raise ServerError(msg)
            warnings.warn(
                "⚠️ Security warning: Management tools are exposed but permission check is not enabled. "
                "This is dangerous in production! Recommend setting enable_permission_check=True or configuring auth",
                UserWarning,
                stacklevel=3,
            )

    # =============================================================================
    # Core Configuration - Management Method Definition
    # =============================================================================

    def _get_management_methods(self) -> dict[str, dict[str, Any]]:
        """Get management method configuration dictionary."""

        # Custom management methods (defined in ManagedServer class, guaranteed to exist)
        self_implemented_methods = {
            # Meta management tools - Manage management tools themselves
            "get_management_tools_info": {
                "description": "Get information and status of currently registered management tools",
                "async": False,
                "title": "View management tool information",
                "annotation_type": "readonly",
                "no_params": True,
                "tags": {"readonly", "safe", "meta", "introspection"},
                "enabled": True,
            },
            "clear_management_tools": {
                "description": "Clear all registered management tools (excluding meta management tools)",
                "async": False,
                "title": "Clear management tools",
                "annotation_type": "destructive",
                "no_params": True,
                "tags": {"admin", "destructive", "dangerous", "meta"},
                "enabled": True,
            },
            "recreate_management_tools": {
                "description": "Recreate all management tools (smart deduplication, won't affect meta tools)",
                "async": False,
                "title": "Recreate management tools",
                "annotation_type": "destructive",
                "no_params": True,
                "tags": {"admin", "modify", "meta", "recovery"},
                "enabled": True,
            },
            "reset_management_tools": {
                "description": "Completely reset management tool system (clear then rebuild, dangerous operation)",
                "async": False,
                "title": "Reset management tool system",
                "annotation_type": "destructive",
                "no_params": True,
                "tags": {"admin", "destructive", "dangerous", "meta", "emergency"},
                "enabled": True,
            },
            "toggle_management_tool": {
                "description": "Dynamically enable/disable specified management tool",
                "async": False,
                "title": "Toggle tool status",
                "annotation_type": "destructive",
                "tags": {"admin", "modify", "meta", "dynamic"},
                "enabled": True,
            },
            "get_tools_by_tags": {
                "description": "Filter and display management tools by tags",
                "async": False,
                "title": "Query tools by tags",
                "annotation_type": "readonly",
                "tags": {"readonly", "safe", "meta", "query"},
                "enabled": True,
            },
        }

        # FastMCP native methods (inherited from FastMCP, need existence check)
        fastmcp_native_methods = {
            # Query methods - Safe, read-only operations
            "get_tools": {
                "description": "Get all registered tools on the server",
                "async": True,
                "title": "View tool list",
                "annotation_type": "readonly",
                "no_params": True,
                "tags": {"readonly", "safe", "query"},
                "enabled": True,
            },
            "get_resources": {
                "description": "Get all registered resources on the server",
                "async": True,
                "title": "View resource list",
                "annotation_type": "readonly",
                "no_params": True,
                "tags": {"readonly", "safe", "query"},
                "enabled": True,
            },
            "get_resource_templates": {
                "description": "Get all registered resource templates on the server",
                "async": True,
                "title": "View resource templates",
                "annotation_type": "readonly",
                "no_params": True,
                "tags": {"readonly", "safe", "query"},
                "enabled": True,
            },
            "get_prompts": {
                "description": "Get all registered prompts on the server",
                "async": True,
                "title": "View prompt templates",
                "annotation_type": "readonly",
                "no_params": True,
                "tags": {"readonly", "safe", "query"},
                "enabled": True,
            },
            # Server composition management - High-risk operations
            "mount": {
                "description": "Mount another FastMCP server to the current server",
                "async": False,
                "title": "Mount server",
                "annotation_type": "external",
                "tags": {"admin", "external", "dangerous", "composition"},
                "enabled": True,
            },
            "import_server": {
                "description": "Import all tools and resources from another FastMCP server",
                "async": True,
                "title": "Import server",
                "annotation_type": "external",
                "tags": {"admin", "external", "dangerous", "composition"},
                "enabled": True,
            },
            # Dynamic management - Medium risk operations
            "add_tool": {
                "description": "Dynamically add tool to server",
                "async": False,
                "title": "Add tool",
                "annotation_type": "destructive",
                "tags": {"admin", "modify", "dynamic"},
                "enabled": True,
            },
            "remove_tool": {
                "description": "Remove specified tool from server",
                "async": False,
                "title": "Remove tool",
                "annotation_type": "destructive",
                "tags": {"admin", "destructive", "dangerous", "dynamic"},
                "enabled": True,
            },
            "add_resource": {
                "description": "Dynamically add resource to server",
                "async": False,
                "title": "Add resource",
                "annotation_type": "destructive",
                "tags": {"admin", "modify", "dynamic"},
                "enabled": True,
            },
            "add_prompt": {
                "description": "Dynamically add prompt to server",
                "async": False,
                "title": "Add prompt template",
                "annotation_type": "destructive",
                "tags": {"admin", "modify", "dynamic"},
                "enabled": True,
            },
            "add_template": {
                "description": "Add a resource template to the server",
                "async": False,
                "title": "Add resource template",
                "annotation_type": "destructive",
                "tags": {"admin", "modify", "dynamic"},
                "enabled": True,
            },
            "add_resource_fn": {
                "description": "Add a resource or template to the server from a function",
                "async": False,
                "title": "Add resource from function",
                "annotation_type": "destructive",
                "tags": {"admin", "modify", "dynamic", "advanced"},
                "enabled": True,
            },
            "add_middleware": {
                "description": "Add middleware to the server",
                "async": False,
                "title": "Add middleware",
                "annotation_type": "destructive",
                "tags": {"admin", "modify", "middleware", "advanced"},
                "enabled": True,
            },
            # Tool Transformation - FastMCP 2.8.0+ feature
            "transform_tool": {
                "description": "Transform existing tools using Tool Transformation API. Use manage_get_tools.",
                "async": False,
                "title": "Transform tool",
                "annotation_type": "destructive",
                "tags": {"admin", "modify", "transform", "advanced"},
                "enabled": True,
            },
            # Permission Debugging - Authorization system feature
            "debug_permission": {
                "description": "Debug permission check process with detailed diagnostics",
                "async": False,
                "title": "Debug permission",
                "annotation_type": "readonly",
                "tags": {"admin", "debug", "permission", "diagnostic"},
                "enabled": True,
            },
            # SaaS Permission Management - Admin tools
            "review_permission_requests": {
                "description": "Review and approve/reject permission requests",
                "async": False,
                "title": "Review permission requests",
                "annotation_type": "destructive",
                "tags": {"admin", "permission", "review", "saas"},
                "enabled": True,
            },
            "assign_user_role": {
                "description": "Directly assign role to user (admin operation)",
                "async": False,
                "title": "Assign user role",
                "annotation_type": "destructive",
                "tags": {"admin", "permission", "assign", "saas"},
                "enabled": True,
            },
            "revoke_user_role": {
                "description": "Revoke role from user (admin operation)",
                "async": False,
                "title": "Revoke user role",
                "annotation_type": "destructive",
                "tags": {"admin", "permission", "revoke", "saas"},
                "enabled": True,
            },
        }

        # Merge methods: custom management methods + existing FastMCP native methods
        result = self_implemented_methods.copy()

        for method_name, config in fastmcp_native_methods.items():
            if hasattr(self, method_name) and callable(getattr(self, method_name)):
                result[method_name] = config
            else:
                logger.debug("FastMCP method '%s' not available in current version, skipping", method_name)

        return result

    # =============================================================================
    # Tool Creation Main Logic
    # =============================================================================

    def _create_management_tools(self) -> list[Tool]:
        """Create management tool object list."""
        management_methods = self._get_management_methods()
        all_tool_names = {f"manage_{method_name}" for method_name in management_methods}

        logger.debug("Defined %s management methods", len(management_methods))

        result = self._create_tools_from_names(all_tool_names, management_methods, use_tool_objects=True)
        # Since use_tool_objects=True, result should be list[Tool]
        assert isinstance(result, list), "Expected list of tools when use_tool_objects=True"
        return result

    def _create_tools_from_names(
        self,
        tool_names: set[str],
        management_methods: dict[str, dict[str, Any]],
        use_tool_objects: bool = False,
    ) -> list[Tool] | int:
        """Unified tool creation logic."""
        created_tools: list[Tool] = []
        created_count = 0

        for tool_name in tool_names:
            method_name = tool_name[7:]  # Remove "manage_" prefix

            if method_name not in management_methods:
                logger.warning("Configuration for method %s not found, skipping creation of %s", method_name, tool_name)
                continue

            config = management_methods[method_name]

            if not config.get("enabled", True):
                logger.debug("Skipping disabled management tool: %s", tool_name)
                continue

            try:
                # Dynamically generate wrapper and parameter definitions
                wrapper, parameters = self._create_method_wrapper_with_params(
                    method_name, config, config["annotation_type"]
                )

                # Build annotations and tags
                annotation_dict = self._ANNOTATION_TEMPLATES[config["annotation_type"]].copy()
                annotation_dict["title"] = config["title"]
                annotations = ToolAnnotations(
                    title=str(config["title"]),  # Ensure title is string type
                    readOnlyHint=annotation_dict.get("readOnlyHint"),
                    destructiveHint=annotation_dict.get("destructiveHint"),
                    openWorldHint=annotation_dict.get("openWorldHint"),
                )
                tool_tags: set[str] = set(config.get("tags", set())) | self.management_tool_tags

                if use_tool_objects:
                    tool = Tool(
                        name=tool_name,
                        description=config["description"],
                        parameters=parameters,
                        annotations=annotations,
                        tags=tool_tags,
                        enabled=config.get("enabled", True),
                    )
                    created_tools.append(tool)
                else:
                    self.tool(
                        name=tool_name,
                        description=config["description"],
                        annotations=annotation_dict,
                        tags=tool_tags,
                        enabled=config.get("enabled", True),
                    )(wrapper)

                created_count += 1
                logger.debug("Successfully created management tool: %s", tool_name)

            except Exception as e:
                logger.error("Error occurred while creating management tool %s: %s", tool_name, e)
                continue

        result_msg = (
            f"Successfully created {len(created_tools)} management tool objects"
            if use_tool_objects
            else f"Successfully registered {created_count} management tools"
        )
        logger.info(result_msg)

        # Return different types based on use_tool_objects parameter
        return created_tools if use_tool_objects else created_count

    # =============================================================================
    # Wrapper Creation and Permission Control
    # =============================================================================

    def _create_method_wrapper_with_params(
        self, method_name: str, config: dict[str, Any], annotation_type: str
    ) -> tuple[Callable[..., str | Awaitable[str]], dict[str, Any]]:
        """Create method wrapper and generate parameter definitions."""
        # Check if it's a no-parameter method
        if config.get("no_params", False):
            wrapper = self._create_wrapper(
                method_name, config["description"], annotation_type, config["async"], has_params=False
            )
            logger.debug("Created no-parameter wrapper for method %s", method_name)
            # Return proper JSON Schema for no-parameter methods
            return wrapper, {"type": "object", "properties": {}}

        # Parameterized method: dynamically detect parameters
        try:
            original_method = getattr(self, method_name)
            sig = inspect.signature(original_method)
            parameters = self._generate_parameters_from_signature(sig, method_name)
            logger.debug("Detected %s parameters for method %s", len(parameters), method_name)

            wrapper = self._create_wrapper(
                method_name, config["description"], annotation_type, config["async"], has_params=True
            )
            return wrapper, parameters

        except (AttributeError, TypeError) as e:
            logger.warning(
                f"Parameter detection failed for method {method_name}: {e}, fallback to no-parameter handling"
            )
            wrapper = self._create_wrapper(
                method_name, config["description"], annotation_type, config["async"], has_params=False
            )
            # Return proper JSON Schema for fallback case
            return wrapper, {"type": "object", "properties": {}}

    def _create_wrapper(
        self, name: str, desc: str, perm_type: str, is_async: bool, has_params: bool
    ) -> Callable[..., str | Awaitable[str]]:
        """Unified wrapper creation function."""

        def permission_check() -> str | None:
            """Unified permission check logic."""
            if self.enable_permission_check:
                # Use authorization system
                if hasattr(self, "_authorization_manager") and self._authorization_manager:
                    try:
                        user_id, _ = get_current_user_info()
                        if not user_id:
                            return "❌ Authentication required"

                        # Check permission using authorization manager
                        allowed = self._authorization_manager.check_annotation_permission(user_id, perm_type)
                        if not allowed:
                            logger.warning("Permission check failed: method %s, permission type %s", name, perm_type)
                            return f"❌ Insufficient permissions for {perm_type} operations"
                    except Exception as e:
                        logger.error("Authorization system error: %s", e)
                        return f"❌ Authorization system error: {e}"
                else:
                    # No authorization manager available
                    logger.warning("Authorization manager not available for permission check")
                    return "❌ Authorization system not available"
            return None

        def log_execution(action: str, execution_time: float | None = None) -> None:
            """Unified execution logging."""
            async_prefix = "Async" if is_async else "Sync"
            if execution_time is not None:
                logger.info("%s management tool %s %s, took %.3f seconds", async_prefix, name, action, execution_time)
            else:
                logger.info("Executing %s management tool: %s", async_prefix, name)

        def execute_method(original_method: Any, *args: Any, **kwargs: Any) -> Any:
            """Unified method execution logic."""
            if asyncio.iscoroutinefunction(original_method) and not is_async:
                logger.error("Error: execute_method used for async method %s", name)
                return "❌ Internal error: async method should use async wrapper"

            if has_params:
                logger.debug("Executing %s with parameters: args=%s, kwargs=%s", name, args, kwargs)
                if kwargs:
                    return original_method(**kwargs)
                if args:
                    return original_method(*args)
                return original_method()
            logger.debug("Executing %s without parameters", name)
            return original_method()

        # Create wrapper
        if is_async:

            async def async_wrapper() -> str:
                perm_error = permission_check()
                if perm_error:
                    return perm_error

                try:
                    log_execution("started")
                    start_time = time.time()
                    original_method = getattr(self, name)

                    if has_params:
                        logger.warning(
                            f"Async method {name} requires parameters, but FastMCP doesn't support complex parameters"
                        )

                    result = await original_method()
                    execution_time = time.time() - start_time
                    log_execution("executed successfully", execution_time)
                    return self._format_tool_result(result)
                except (AttributeError, TypeError, ValueError) as e:
                    logger.error(f"Async management tool {name} execution failed: {e}", exc_info=True)
                    return f"❌ Execution error: {e!s}"

            wrapper = async_wrapper
        else:

            def sync_wrapper() -> str:
                perm_error = permission_check()
                if perm_error:
                    return perm_error

                try:
                    log_execution("started")
                    start_time = time.time()
                    original_method = getattr(self, name)

                    if has_params:
                        logger.warning(
                            f"Sync method {name} requires parameters, but FastMCP doesn't support complex parameters"
                        )

                    result = execute_method(original_method)
                    execution_time = time.time() - start_time
                    log_execution("executed successfully", execution_time)
                    return self._format_tool_result(result)
                except (AttributeError, TypeError, ValueError) as e:
                    logger.error(f"Sync management tool {name} execution failed: {e}", exc_info=True)
                    return f"❌ Execution error: {e!s}"

            wrapper = sync_wrapper  # type: ignore

        wrapper.__name__ = f"manage_{name}"
        wrapper.__doc__ = desc
        return wrapper

    # =============================================================================
    # Public Management Interface
    # =============================================================================

    def get_management_tools_info(self) -> dict[str, Any]:
        """Get information about currently registered management tools."""
        try:
            return self._get_management_tools_info_impl()
        except Exception as e:
            logger.error("Error getting management tools info: %s", e, exc_info=True)
            return {
                "management_tools": [],
                "configuration": {
                    "expose_management_tools": self.expose_management_tools,
                    "enable_permission_check": self.enable_permission_check,
                    "management_tool_tags": list(self.management_tool_tags),
                },
                "statistics": {"total_management_tools": 0, "enabled_tools": 0, "permission_levels": {}},
                "error": str(e),
            }

    def clear_management_tools(self) -> str:
        """Clear all registered management tools."""
        return self._safe_execute("clear management tools", self._clear_management_tools_impl)

    def recreate_management_tools(self) -> str:
        """Recreate all management tools."""
        return self._safe_execute("recreate management tools", self._recreate_management_tools_impl)

    def reset_management_tools(self) -> str:
        """Completely reset the management tools system."""
        return self._safe_execute("reset management tools system", self._reset_management_tools_impl)

    def toggle_management_tool(self, tool_name: str, enabled: bool | None = None) -> str:
        """Dynamically enable/disable management tools."""
        return self._safe_execute("toggle tool status", lambda: self._toggle_management_tool_impl(tool_name, enabled))

    def get_tools_by_tags(self, include_tags: set[str] | None = None, exclude_tags: set[str] | None = None) -> str:
        """Query management tools by tags."""
        return self._safe_execute(
            "query tools by tags", lambda: self._get_tools_by_tags_impl(include_tags, exclude_tags)
        )

    def transform_tool(self, source_tool_name: str, new_tool_name: str, transform_config: str = "{}") -> str:
        """Transform existing tools using the official Tool Transformation API."""
        return self._safe_execute(
            "tool transformation", lambda: self._transform_tool_impl(source_tool_name, new_tool_name, transform_config)
        )

    def debug_permission(self, user_id: str, resource: str, action: str, scope: str = "*") -> str:
        """Debug permission check process with detailed diagnostics."""
        return self._safe_execute(
            "permission debugging", lambda: self._debug_permission_impl(user_id, resource, action, scope)
        )

    # =============================================================================
    # Management Interface Implementation
    # =============================================================================

    def _safe_execute(self, operation: str, func: Callable[[], str]) -> str:
        """Unified wrapper for safe operation execution."""
        try:
            logger.info("Starting %s", operation)
            result = func()
            logger.info("%s successful", operation)
            return result
        except Exception as e:
            error_msg = f"❌ Error occurred during {operation}: {e}"
            logger.error(error_msg, exc_info=True)
            return error_msg

    def _get_management_tools_info_impl(self) -> dict[str, Any]:
        """Implementation for getting management tools information with structured output."""
        if not hasattr(self, "_tool_manager") or not hasattr(self._tool_manager, "_tools"):
            return {
                "management_tools": [],
                "configuration": {
                    "expose_management_tools": self.expose_management_tools,
                    "enable_permission_check": self.enable_permission_check,
                    "management_tool_tags": list(self.management_tool_tags),
                },
                "statistics": {"total_management_tools": 0, "enabled_tools": 0, "permission_levels": {}},
            }

        tools = self._tool_manager._tools
        management_tools = {
            name: tool for name, tool in tools.items() if isinstance(name, str) and name.startswith("manage_")
        }

        # Build structured tool information
        tool_info_list = []
        enabled_count = 0
        permission_levels: dict[str, int] = {}

        for tool_name, tool in management_tools.items():
            description = getattr(tool, "description", "No description")
            annotations = getattr(tool, "annotations", {})
            enabled = getattr(tool, "enabled", True)

            if enabled:
                enabled_count += 1

            # Extract permission level
            if hasattr(annotations, "destructiveHint"):
                is_destructive = getattr(annotations, "destructiveHint", False)
                is_readonly = getattr(annotations, "readOnlyHint", False)
            elif isinstance(annotations, dict):
                is_destructive = annotations.get("destructiveHint", False)
                is_readonly = annotations.get("readOnlyHint", False)
            else:
                is_destructive = False
                is_readonly = False

            # Determine permission level
            if is_destructive:
                permission_level = "destructive"
            elif is_readonly:
                permission_level = "readonly"
            else:
                permission_level = "modify"

            # Count permission levels
            permission_levels[permission_level] = permission_levels.get(permission_level, 0) + 1

            tool_info = {
                "name": tool_name,
                "description": description,
                "permission_level": permission_level,
                "enabled": enabled,
                "annotations": dict(annotations) if isinstance(annotations, dict) else {},
            }
            tool_info_list.append(tool_info)

        return {
            "management_tools": tool_info_list,
            "configuration": {
                "expose_management_tools": self.expose_management_tools,
                "enable_permission_check": self.enable_permission_check,
                "management_tool_tags": list(self.management_tool_tags),
            },
            "statistics": {
                "total_management_tools": len(management_tools),
                "enabled_tools": enabled_count,
                "permission_levels": permission_levels,
            },
        }

    def _clear_management_tools_impl(self) -> str:
        """Implementation for clearing management tools."""
        removed_count = self._clear_management_tools()
        return f"✅ Successfully cleared {removed_count} management tools"

    def _recreate_management_tools_impl(self) -> str:
        """Implementation for recreating management tools."""
        existing_tools = self._get_management_tool_names()
        management_methods = self._get_management_methods()
        expected_tools = {f"manage_{method_name}" for method_name in management_methods}
        missing_tools = expected_tools - existing_tools

        logger.debug("Currently %s exist, found %s missing management tools", len(existing_tools), len(missing_tools))

        if not missing_tools:
            return "✅ All management tools already exist, no need to recreate"

        created_count = self._create_tools_from_names(missing_tools, management_methods, use_tool_objects=False)
        return f"✅ Successfully recreated {created_count} management tools"

    def _reset_management_tools_impl(self) -> str:
        """Implementation for resetting management tools."""
        cleared_count = self._clear_management_tools()
        logger.info("Cleared %s management tools", cleared_count)

        management_methods = self._get_management_methods()
        all_tool_names = {f"manage_{method_name}" for method_name in management_methods}
        recreated_count = self._create_tools_from_names(all_tool_names, management_methods, use_tool_objects=False)

        return f"🔄 Management tools system reset complete: cleared {cleared_count}, rebuilt {recreated_count}"

    def _toggle_management_tool_impl(self, tool_name: str, enabled: bool | None) -> str:
        """Implementation for toggling management tool status."""
        # Normalize tool name
        if not tool_name.startswith("manage_"):
            tool_name = f"manage_{tool_name}"

        # Check if tool exists
        if not hasattr(self, "_tool_manager") or not hasattr(self._tool_manager, "_tools"):
            return "❌ Tool manager not found"

        if tool_name not in self._tool_manager._tools:
            available_tools = [
                name for name in self._tool_manager._tools if isinstance(name, str) and name.startswith("manage_")
            ]
            return f"❌ Management tool {tool_name} does not exist\nAvailable tools: {', '.join(available_tools)}"

        # Get current tool object
        tool = self._tool_manager._tools[tool_name]
        current_enabled = getattr(tool, "enabled", True)

        # Determine new status
        new_enabled = not current_enabled if enabled is None else enabled

        # Update tool status
        if hasattr(tool, "enabled"):
            tool.enabled = new_enabled
            action = "enabled" if new_enabled else "disabled"
            return f"✅ {action.capitalize()} management tool: {tool_name}"
        return f"⚠️ Tool {tool_name} does not support dynamic enable/disable functionality"

    def _get_tools_by_tags_impl(self, include_tags: set[str] | None, exclude_tags: set[str] | None) -> str:
        """Implementation for querying tools by tags."""
        logger.debug("Querying tools by tags: include=%s, exclude=%s", include_tags, exclude_tags)

        if not hasattr(self, "_tool_manager") or not hasattr(self._tool_manager, "_tools"):
            return "📋 Tool manager not found"

        tools = self._tool_manager._tools
        management_tools = {
            name: tool for name, tool in tools.items() if isinstance(name, str) and name.startswith("manage_")
        }

        if not management_tools:
            return "📋 No management tools currently available"

        # Filter by tags
        filtered_tools = {}
        for tool_name, tool in management_tools.items():
            tool_tags: set[str] = getattr(tool, "tags", set())

            # Check include tags
            if include_tags and not (tool_tags & include_tags):
                continue

            # Check exclude tags
            if exclude_tags and (tool_tags & exclude_tags):
                continue

            filtered_tools[tool_name] = tool

        if not filtered_tools:
            return f"📋 No tools match the criteria\nFilter conditions: include {include_tags}, exclude {exclude_tags}"

        # Format results
        info_lines = [f"📋 Query Results (Total: {len(filtered_tools)}):"]
        for tool_name, tool in filtered_tools.items():
            description = getattr(tool, "description", "No description")
            tags: set[str] = getattr(tool, "tags", set())
            enabled = getattr(tool, "enabled", True)
            status_icon = "✅" if enabled else "❌"

            info_lines.append(f"  {status_icon} {tool_name}")
            info_lines.append(f"    Description: {description}")
            info_lines.append(f"    Tags: {', '.join(sorted(tags))}")

        return "\n".join(info_lines)

    def _transform_tool_impl(self, source_tool_name: str, new_tool_name: str, transform_config: str) -> str:
        """Implementation for tool transformation."""
        import json

        try:
            from fastmcp.tools import Tool
            from fastmcp.tools.tool_transform import ArgTransform
        except ImportError as e:
            return f"❌ Tool Transformation functionality not available: {e}"

        # Parse transformation configuration
        try:
            config = json.loads(transform_config) if transform_config.strip() else {}
        except json.JSONDecodeError as e:
            return f"❌ Transformation configuration JSON format error: {e}"

        # Get source tool
        if not hasattr(self, "_tool_manager") or not hasattr(self._tool_manager, "_tools"):
            return "❌ Tool manager not available"

        source_tool = self._tool_manager._tools.get(source_tool_name)
        if not source_tool:
            return f"❌ Source tool '{source_tool_name}' does not exist"

        # Check if new tool name already exists
        if new_tool_name in self._tool_manager._tools:
            return f"❌ Tool name '{new_tool_name}' already exists"

        # Build transformation arguments
        transform_args = {}
        for param_name, param_config in config.get("transform_args", {}).items():
            transform_args[param_name] = ArgTransform(
                name=param_config.get("name", param_name),
                description=param_config.get("description", f"Transform parameter {param_name}"),
                default=param_config.get("default"),
            )

        # Perform tool transformation using official API
        transformed_tool = Tool.from_tool(
            source_tool,
            name=new_tool_name,
            description=config.get("description", f"Transformed from {source_tool_name}"),
            transform_args=transform_args,
        )

        # Add transformed tool to server
        self.add_tool(transformed_tool)

        result = textwrap.dedent(f"""
            ✅ Tool Transformation successful!

            🔧 Transformation Details:
            - Source tool: {source_tool_name}
            - New tool: {new_tool_name}
            - Transformation type: Official Tool.from_tool() API
            - Transform parameters: {len(transform_args)}

            📊 Transformation Configuration:
            {json.dumps(config, indent=2, ensure_ascii=False)}

            🎯 New tool has been added to the server and is ready to use!
        """).strip()

        logger.info("🎯 Successfully transformed tool: %s -> %s", source_tool_name, new_tool_name)
        return result

    def _debug_permission_impl(self, user_id: str, resource: str, action: str, scope: str) -> str:
        """Implementation for permission debugging."""
        if not hasattr(self, "_authorization_manager") or not self._authorization_manager:
            return "❌ Authorization system not available. Please enable authorization to use this feature."

        try:
            # 执行权限调试
            debug_info = self._authorization_manager.debug_permission(user_id, resource, action, scope)

            # 格式化输出
            result_lines = []
            result_lines.append("🔍 权限调试报告")
            result_lines.append("=" * 50)

            # 请求信息
            req = debug_info["request"]
            result_lines.append("\n📋 权限请求:")
            result_lines.append(f"   用户: {req['user_id']}")
            result_lines.append(f"   资源: {req['resource']}")
            result_lines.append(f"   操作: {req['action']}")
            result_lines.append(f"   范围: {req['scope']}")

            # 用户信息
            user_info = debug_info["user_info"]
            result_lines.append("\n👤 用户信息:")
            result_lines.append(f"   角色: {user_info.get('roles', [])}")
            result_lines.append(f"   直接权限: {len(user_info.get('direct_permissions', []))} 条")

            # 权限检查结果
            check = debug_info["permission_check"]
            result_lines.append("\n🔒 权限检查:")
            result_lines.append(f"   Casbin结果: {'✅ 通过' if check['casbin_result'] else '❌ 拒绝'}")
            result_lines.append(f"   临时权限: {'✅ 通过' if check['temporary_permission'] else '❌ 拒绝'}")
            result_lines.append(f"   最终结果: {'✅ 允许' if check['final_result'] else '❌ 拒绝'}")

            # 匹配的策略
            policies = debug_info.get("matching_policies", [])
            result_lines.append(f"\n📜 匹配策略: {len(policies)} 条")
            for policy in policies:
                result_lines.append(
                    f"   • {policy['subject']} -> {policy['resource']}:{policy['action']}:{policy['scope']} ({policy['effect']})"
                )

            # 诊断信息
            diagnosis = debug_info.get("diagnosis", [])
            if diagnosis:
                result_lines.append("\n🔍 诊断信息:")
                for diag in diagnosis:
                    result_lines.append(f"   {diag}")

            # 建议
            suggestions = debug_info.get("suggestions", [])
            if suggestions:
                result_lines.append("\n💡 建议:")
                for suggestion in suggestions:
                    result_lines.append(f"   {suggestion}")

            result_lines.append("\n" + "=" * 50)

            return "\n".join(result_lines)

        except Exception as e:
            logger.error(f"Error in permission debugging: {e}")
            return f"❌ Permission debugging failed: {str(e)}"

    # =============================================================================
    # Internal Helper Methods
    # =============================================================================

    def _get_management_tool_count(self) -> int:
        """Get the current number of management tools."""
        if hasattr(self, "_tool_manager") and hasattr(self._tool_manager, "_tools"):
            return len(
                [name for name in self._tool_manager._tools if isinstance(name, str) and name.startswith("manage_")]
            )
        return 0

    def _get_management_tool_names(self) -> set[str]:
        """Get the set of current management tool names."""
        if hasattr(self, "_tool_manager") and hasattr(self._tool_manager, "_tools"):
            return {name for name in self._tool_manager._tools if isinstance(name, str) and name.startswith("manage_")}
        return set()

    def _clear_management_tools(self) -> int:
        """Internal method: Clear all registered management tools."""
        removed_count = 0

        try:
            if hasattr(self, "_tool_manager") and hasattr(self._tool_manager, "_tools"):
                tool_names = list(self._tool_manager._tools.keys())

                for tool_name in tool_names:
                    if (
                        isinstance(tool_name, str)
                        and tool_name.startswith("manage_")
                        and tool_name not in self._META_MANAGEMENT_TOOLS
                    ):
                        try:
                            self.remove_tool(tool_name)
                            removed_count += 1
                            logger.debug("Removed management tool: %s", tool_name)
                        except Exception as e:
                            logger.warning("Error removing tool %s: %s", tool_name, e)

            logger.info(
                f"Successfully cleared {removed_count} management tools (preserved {len(self._META_MANAGEMENT_TOOLS)})"
            )
            return removed_count

        except Exception as e:
            logger.error(f"Error occurred while clearing management tools: {e}", exc_info=True)
            return removed_count

    def _generate_parameters_from_signature(self, sig: inspect.Signature, method_name: str) -> dict[str, Any]:
        """Generate parameter definitions from method signature."""
        parameters = {}
        required_params = []

        for param_name, param in sig.parameters.items():
            if param_name == "self":
                continue

            param_info = {"description": f"Parameter {param_name} for {method_name}"}

            # Infer parameter type based on type annotation
            if param.annotation != inspect.Parameter.empty:
                param_type = self._map_python_type_to_json_schema(param.annotation)
                param_info["type"] = param_type
            else:
                param_info["type"] = "string"

            # Handle default values
            if param.default != inspect.Parameter.empty:
                if param.default is None:
                    param_info["default"] = "null"
                else:
                    param_info["default"] = str(param.default)
            else:
                # This parameter is required (no default value)
                required_params.append(param_name)

            parameters[param_name] = param_info

        # Create proper JSON Schema structure
        schema = {"type": "object", "properties": parameters}

        # Add required array if there are required parameters
        if required_params:
            schema["required"] = required_params

        return schema

    def _map_python_type_to_json_schema(self, python_type: Any) -> str:
        """Map Python types to JSON Schema types."""
        type_mapping = {str: "string", int: "integer", float: "number", bool: "boolean", list: "array", dict: "object"}

        if python_type in type_mapping:
            return type_mapping[python_type]
        if hasattr(python_type, "__origin__"):
            origin = python_type.__origin__
            if origin is list:
                return "array"
            if origin is dict:
                return "object"
        return "string"

    def _format_tool_result(self, result: Any) -> str:
        """Format tool execution result as string."""
        try:
            if isinstance(result, dict):
                if not result:
                    return "📋 No data"

                formatted_lines = []
                for key, value in result.items():
                    if isinstance(value, dict) and hasattr(value, "name"):
                        name = getattr(value, "name", key)
                        desc = getattr(value, "description", "No description")
                        formatted_lines.append(f"• {name}: {desc}")
                    else:
                        formatted_lines.append(f"• {key}: {value}")

                return "\n".join(formatted_lines)

            if isinstance(result, list | tuple):
                if not result:
                    return "📋 Empty list"
                return f"📋 Total {len(result)} items:\n" + "\n".join(f"• {item}" for item in result)

            if result is None:
                return "✅ Operation completed"

            return str(result)

        except Exception as e:
            logger.error(f"Error occurred while formatting result: {e}", exc_info=True)
            return f"⚠️ Result formatting error: {e}"

    # =============================================================================
    # TODO: 管理工具功能扩展
    # =============================================================================

    # TODO: 添加批量用户管理工具 (优先级: 高)
    # - batch_assign_user_roles: 批量分配用户角色
    # - bulk_import_users: 从CSV批量导入用户
    # - export_user_report: 导出用户权限报告
    # - sync_users_from_external: 从外部系统同步用户

    # TODO: 添加权限配置验证工具 (优先级: 中)
    # - validate_server_permissions: 验证服务器权限配置
    # - check_permission_conflicts: 检查权限冲突
    # - audit_security_policies: 审计安全策略
    # - generate_permission_report: 生成权限分析报告

    # TODO: 添加动态权限管理工具 (优先级: 低)
    # - create_custom_role: 创建自定义角色
    # - modify_role_permissions: 修改角色权限
    # - create_permission_template: 创建权限模板
    # - manage_permission_inheritance: 管理权限继承关系

    # =============================================================================
    # 用户权限工具注册 (普通工具，非管理工具)
    # =============================================================================

    def _register_user_permission_tools(self):
        """注册用户权限自助工具（作为普通工具，不是管理工具）"""
        try:
            # 权限申请工具
            self.add_tool(
                self._request_permission_tool,
                name="request_permission_upgrade",
                description="申请权限升级 - 用户可以申请角色升级",
                annotations={
                    "readOnlyHint": False,
                    "destructiveHint": False,
                    "openWorldHint": False,
                },
            )

            # 查看权限工具
            self.add_tool(
                self._view_my_permissions_tool,
                name="view_my_permissions",
                description="查看我的权限 - 查看当前角色、权限和使用限制",
                annotations={
                    "readOnlyHint": True,
                    "destructiveHint": False,
                    "openWorldHint": False,
                },
            )

            # 查看申请历史工具
            self.add_tool(
                self._view_my_requests_tool,
                name="view_my_permission_requests",
                description="查看我的申请历史 - 查看权限申请状态和历史记录",
                annotations={
                    "readOnlyHint": True,
                    "destructiveHint": False,
                    "openWorldHint": False,
                },
            )

            logger.info("User permission tools registered successfully")

        except Exception as e:
            logger.error(f"Failed to register user permission tools: {e}")

    # =============================================================================
    # 用户权限工具实现 (普通工具)
    # =============================================================================

    def _request_permission_tool(self, requested_role: str, reason: str = "") -> str:
        """权限申请工具（普通工具版本）"""
        return self._request_permission_impl(requested_role, reason)

    def _view_my_permissions_tool(self) -> str:
        """查看权限工具（普通工具版本）"""
        return self._view_my_permissions_impl()

    def _view_my_requests_tool(self) -> str:
        """查看申请历史工具（普通工具版本）"""
        return self._view_my_requests_impl()

    # =============================================================================
    # SaaS权限管理工具实现 (管理工具)
    # =============================================================================

    def _request_permission_impl(self, requested_role: str, reason: str = "") -> str:
        """用户权限申请实现"""
        if not hasattr(self, "_authorization_manager") or not self._authorization_manager:
            return "❌ Authorization system not available"

        try:
            from .authorization import get_current_user_info

            user_id, _ = get_current_user_info()
            if not user_id:
                return "❌ Authentication required"

            request_id = self._authorization_manager.submit_permission_request(user_id, requested_role, reason)

            return f"""✅ 权限申请已提交
申请ID: {request_id}
申请角色: {requested_role}
申请原因: {reason}

您的申请将由管理员审核，请耐心等待。
可以使用 'view_my_requests' 查看申请状态。"""

        except Exception as e:
            logger.error(f"Error in permission request: {e}")
            return f"❌ 申请失败: {str(e)}"

    def _view_my_permissions_impl(self) -> str:
        """查看用户权限摘要实现"""
        if not hasattr(self, "_authorization_manager") or not self._authorization_manager:
            return "❌ Authorization system not available"

        try:
            from .authorization import get_current_user_info

            user_id, _ = get_current_user_info()
            if not user_id:
                return "❌ Authentication required"

            summary = self._authorization_manager.get_user_permission_summary(user_id)

            if "error" in summary:
                return f"❌ 获取权限信息失败: {summary['error']}"

            result_lines = [
                "👤 我的权限信息",
                "=" * 40,
                f"用户ID: {summary['user_id']}",
                f"当前角色: {', '.join(summary['current_roles']) if summary['current_roles'] else '无'}",
                f"待处理申请: {summary['pending_requests']} 个",
                "",
                "🔑 权限列表:",
            ]

            for perm in summary["permissions"][:10]:  # 只显示前10个权限
                result_lines.append(f"  • {perm}")

            if len(summary["permissions"]) > 10:
                result_lines.append(f"  ... 还有 {len(summary['permissions']) - 10} 个权限")

            if summary["limitations"]:
                result_lines.append("\n📊 使用限制:")
                for key, value in summary["limitations"].items():
                    result_lines.append(f"  • {key}: {value}")

            return "\n".join(result_lines)

        except Exception as e:
            logger.error(f"Error viewing permissions: {e}")
            return f"❌ 查看权限失败: {str(e)}"

    def _view_my_requests_impl(self) -> str:
        """查看用户申请历史实现"""
        if not hasattr(self, "_authorization_manager") or not self._authorization_manager:
            return "❌ Authorization system not available"

        try:
            from .authorization import get_current_user_info

            user_id, _ = get_current_user_info()
            if not user_id:
                return "❌ Authentication required"

            requests = self._authorization_manager.get_permission_requests(user_id=user_id)

            if not requests:
                return "📋 您还没有提交过权限申请"

            result_lines = [
                "📋 我的权限申请历史",
                "=" * 40,
            ]

            for req in requests[:10]:  # 只显示最近10个申请
                status_emoji = {"pending": "⏳", "approved": "✅", "rejected": "❌"}.get(req["status"], "❓")
                result_lines.append(f"{status_emoji} {req['submitted_at'][:19]}")
                result_lines.append(f"   申请角色: {req['requested_role']}")
                result_lines.append(f"   状态: {req['status']}")
                if req["review_comment"]:
                    result_lines.append(f"   审批意见: {req['review_comment']}")
                result_lines.append("")

            if len(requests) > 10:
                result_lines.append(f"... 还有 {len(requests) - 10} 个历史申请")

            return "\n".join(result_lines)

        except Exception as e:
            logger.error(f"Error viewing requests: {e}")
            return f"❌ 查看申请失败: {str(e)}"

    def _review_permission_requests_impl(
        self, action: str = "list", request_id: str = "", review_action: str = "", comment: str = ""
    ) -> str:
        """审批权限申请实现"""
        if not hasattr(self, "_authorization_manager") or not self._authorization_manager:
            return "❌ Authorization system not available"

        try:
            from .authorization import get_current_user_info

            reviewer_id, _ = get_current_user_info()
            if not reviewer_id:
                return "❌ Authentication required"

            if action == "list":
                # 列出待审批的申请
                requests = self._authorization_manager.get_permission_requests(status="pending")

                if not requests:
                    return "📋 当前没有待审批的权限申请"

                result_lines = [
                    "📋 待审批的权限申请",
                    "=" * 40,
                ]

                for req in requests:
                    result_lines.append(f"🆔 申请ID: {req['request_id']}")
                    result_lines.append(f"   用户: {req['user_id']}")
                    result_lines.append(f"   申请角色: {req['requested_role']}")
                    result_lines.append(f"   当前角色: {req['current_roles']}")
                    result_lines.append(f"   申请时间: {req['submitted_at'][:19]}")
                    result_lines.append(f"   申请原因: {req['reason']}")
                    result_lines.append("")

                result_lines.append("💡 使用以下格式审批:")
                result_lines.append(
                    "   action=review, request_id=申请ID, review_action=approve/reject, comment=审批意见"
                )

                return "\n".join(result_lines)

            elif action == "review":
                if not request_id or not review_action:
                    return "❌ 请提供 request_id 和 review_action (approve/reject)"

                success = self._authorization_manager.review_permission_request(
                    request_id, reviewer_id, review_action, comment
                )

                if success:
                    action_text = "批准" if review_action == "approve" else "拒绝"
                    return f"✅ 权限申请已{action_text}: {request_id}"
                else:
                    return f"❌ 审批失败: {request_id}"

            else:
                return "❌ 无效的操作，请使用 action=list 或 action=review"

        except Exception as e:
            logger.error(f"Error reviewing requests: {e}")
            return f"❌ 审批失败: {str(e)}"

    def _assign_user_role_impl(self, target_user_id: str, role: str, reason: str = "") -> str:
        """管理员直接分配角色实现"""
        if not hasattr(self, "_authorization_manager") or not self._authorization_manager:
            return "❌ Authorization system not available"

        try:
            from .authorization import get_current_user_info

            admin_id, _ = get_current_user_info()
            if not admin_id:
                return "❌ Authentication required"

            success = self._authorization_manager.assign_role(target_user_id, role, admin_id, reason)

            if success:
                return f"✅ 角色分配成功: {target_user_id} -> {role}"
            else:
                return "❌ 角色分配失败"

        except Exception as e:
            logger.error(f"Error assigning role: {e}")
            return f"❌ 分配失败: {str(e)}"

    def _revoke_user_role_impl(self, target_user_id: str, role: str, reason: str = "") -> str:
        """管理员撤销用户角色实现"""
        if not hasattr(self, "_authorization_manager") or not self._authorization_manager:
            return "❌ Authorization system not available"

        try:
            from .authorization import get_current_user_info

            admin_id, _ = get_current_user_info()
            if not admin_id:
                return "❌ Authentication required"

            success = self._authorization_manager.remove_role(target_user_id, role, admin_id, reason)

            if success:
                return f"✅ 角色撤销成功: {target_user_id} -x-> {role}"
            else:
                return "❌ 角色撤销失败"

        except Exception as e:
            logger.error(f"Error revoking role: {e}")
            return f"❌ 撤销失败: {str(e)}"
