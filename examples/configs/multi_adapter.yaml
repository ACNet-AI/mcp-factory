# Multi-source adapter configuration example
# Shows how to define multiple source systems to adapt through configuration files

# Basic project information
project:
  name: "comprehensive-mcp-server"
  description: "Comprehensive MCP server based on multi-source adaptation"
  version: "1.0.0"

# Source system definitions
sources:
  # Python class source - adapt existing Python libraries/frameworks
  - type: "python_class"
    name: "mcp_factory"
    source_path: "mcp_factory.MCPFactory"
    config:
      strategy: "singleton"
      instance_creation: "MCPFactory('./workspace')"
      methods_filter:
        - "create_server"
        - "build_project" 
        - "list_servers"
        - "start_server"
        - "stop_server"
      exclude_methods:
        - "_private_method"
        - "__internal__"

  # HTTP API source - adapt existing Web APIs
  - type: "http_api"
    name: "github_api"
    source_path: "https://api.github.com"
    config:
      auth:
        type: "bearer"
        token_env: "GITHUB_TOKEN"  # Get from environment variable
      endpoints:
        - name: "get_user"
          method: "GET"
          path: "/users/{username}"
          parameters:
            - name: "username"
              type: "string"
              required: true
              location: "path"
              description: "GitHub username"
          description: "Get GitHub user information"
          
        - name: "list_user_repos"
          method: "GET"
          path: "/users/{username}/repos"
          parameters:
            - name: "username"
              type: "string"
              required: true
              location: "path"
            - name: "type"
              type: "string"
              required: false
              location: "query"
              default: "all"
              enum: ["all", "owner", "member"]
            - name: "sort"
              type: "string"
              required: false
              location: "query"
              default: "created"
              enum: ["created", "updated", "pushed", "full_name"]
          description: "List user repositories"

        - name: "create_issue"
          method: "POST"
          path: "/repos/{owner}/{repo}/issues"
          parameters:
            - name: "owner"
              type: "string"
              required: true
              location: "path"
            - name: "repo"
              type: "string"
              required: true
              location: "path"
            - name: "title"
              type: "string"
              required: true
              location: "body"
            - name: "body"
              type: "string"
              required: false
              location: "body"
            - name: "labels"
              type: "array"
              required: false
              location: "body"
          description: "Create GitHub Issue"

  # FastAPI application source - auto-discover through OpenAPI
  - type: "http_api"
    name: "local_fastapi"
    source_path: "http://localhost:8000"
    config:
      auto_discovery: true  # Auto-discover endpoints from OpenAPI docs
      openapi_url: "/openapi.json"
      timeout: 10
      retry_count: 3

  # CLI tool source - adapt system commands and tools
  - type: "cli"
    name: "system_tools"
    source_path: "system"
    config:
      commands:
        - name: "list_directory"
          command: "ls"
          arguments:
            - name: "path"
              type: "string"
              required: true
              description: "Directory path to list"
            - name: "all_files"
              type: "boolean"
              required: false
              flag: "-a"
              description: "Show hidden files"
            - name: "long_format"
              type: "boolean"
              required: false
              flag: "-l"
              description: "Long format display"
          description: "List directory contents"
          
        - name: "find_files"
          command: "find"
          arguments:
            - name: "path"
              type: "string"
              required: true
              description: "Search path"
            - name: "name_pattern"
              type: "string"
              required: false
              flag: "-name"
              description: "Filename pattern"
            - name: "type"
              type: "string"
              required: false
              flag: "-type"
              enum: ["f", "d", "l"]
              description: "File type (f=file, d=directory, l=link)"
          description: "Find files and directories"

  # Git tool source
  - type: "cli"
    name: "git_tools"
    source_path: "git"
    config:
      working_directory: "."  # Working directory for Git commands
      commands:
        - name: "git_status"
          command: "git"
          arguments:
            - name: "subcommand"
              type: "string"
              required: true
              default: "status"
              description: "Git subcommand"
            - name: "porcelain"
              type: "boolean"
              required: false
              flag: "--porcelain"
              description: "Machine-readable format"
          description: "Check Git repository status"
          
        - name: "git_log"
          command: "git"
          arguments:
            - name: "subcommand"
              type: "string"
              required: true
              default: "log"
            - name: "oneline"
              type: "boolean"
              required: false
              flag: "--oneline"
            - name: "max_count"
              type: "integer"
              required: false
              flag: "--max-count"
              description: "Limit number of commits"
          description: "View Git commit history"

  # Docker tool source
  - type: "cli"
    name: "docker_tools"
    source_path: "docker"
    config:
      commands:
        - name: "list_containers"
          command: "docker"
          arguments:
            - name: "subcommand"
              type: "string"
              required: true
              default: "ps"
            - name: "all"
              type: "boolean"
              required: false
              flag: "-a"
              description: "Show all containers"
            - name: "format"
              type: "string"
              required: false
              flag: "--format"
              default: "table"
              description: "Output format"
          description: "List Docker containers"

# Tool generation configuration
generation:
  # Generation options
  options:
    include_type_hints: true
    add_error_handling: true
    generate_tests: false
    create_readme: true
    
  # Select tools to generate
  selected_tools:
    mcp_factory:
      - "create_server"
      - "build_project"
      - "list_servers"
    github_api:
      - "get_user"
      - "list_user_repos"
    system_tools:
      - "list_directory"
      - "find_files"
    git_tools:
      - "git_status"
      - "git_log"
    docker_tools:
      - "list_containers"

# MCP server configuration
server:
  name: "comprehensive-mcp-server"
  instructions: |
    This MCP server provides comprehensive system management capabilities by adapting
    multiple source systems including Python libraries, HTTP APIs, and CLI tools.
    
    Available capabilities:
    - Project management via mcp-factory
    - GitHub API integration
    - System file operations
    - Git repository management
    - Docker container management
  
  transport:
    transport: "stdio"
    host: "localhost"
    port: 8000
    log_level: "INFO"

# Metadata
metadata:
  author: "MCP Factory Team"
  license: "MIT"
  tags:
    - "multi-source"
    - "automation"
    - "system-management"
    - "git"
    - "docker"
    - "github"
  
  documentation:
    readme: |
      # Comprehensive MCP Server
      
      This server demonstrates the power of multi-source adaptation, combining:
      
      ## Adapted Sources
      
      ### Python Libraries
      - **mcp-factory**: Project and server management
      
      ### HTTP APIs  
      - **GitHub API**: Repository and user management
      - **Local FastAPI**: Custom application integration
      
      ### CLI Tools
      - **System Commands**: File and directory operations
      - **Git**: Version control operations
      - **Docker**: Container management
      
      ## Usage Examples
      
      ```python
      # Create a new MCP server project
      result = create_server("my-project", {...})
      
      # Get GitHub user information
      user_info = get_user("octocat")
      
      # List directory contents
      files = list_directory("/home/user", all_files=True)
      
      # Check Git status
      status = git_status(porcelain=True)
      
      # List Docker containers
      containers = list_containers(all=True)
      ```
    
    examples_dir: "examples/"
    api_docs: "docs/api/" 